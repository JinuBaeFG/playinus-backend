generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id           Int      @id @default(autoincrement())
  privacyTerms String?
  gpsTerms     String?
  useTerms     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AdminNotice {
  id          Int      @id @default(autoincrement())
  title       String
  discription String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminFaq {
  id          Int      @id @default(autoincrement())
  title       String
  discription String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                  Int                   @id @default(autoincrement())
  username            String
  email               String                @unique
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  avatar              String?
  gender              String?               @default("선택 안함")
  googleConnect       Boolean               @default(false)
  googleID            String?               @unique
  kakaoConnect        Boolean               @default(false)
  kakaoID             String?               @unique
  naverConnect        Boolean               @default(false)
  naverID             String?               @unique
  appleConnect        Boolean               @default(false)
  appleID             String?               @unique
  phoneNumber         String                @unique
  privacyAccess       Boolean               @default(false)
  usetermAccess       Boolean               @default(false)
  locationAccess      Boolean               @default(false)
  board               Board[]
  boardComment        BoardComment[]
  boardLike           BoardLike[]
  boardReComment      BoardReComment[]
  comments            Comment[]
  gallery             Gallery[]
  groupJoinRequest    GroupJoinRequest[]
  groupPresident      GroupPresident?
  likes               Like[]
  message             Message[]
  notice              Notice[]
  noticeComment       NoticeComment[]
  noticeLike          NoticeLike[]
  noticeReComment     NoticeReComment[]
  photos              Photo[]
  reComment           ReComment[]
  tutorInquiry        TutorInquiry[]
  tutorInquiryComment TutorInquiryComment[]
  group               Group[]               @relation("GroupToUser")
  rooms               Room[]                @relation("RoomToUser")
  tutor               Tutor[]               @relation("TutorToUser")
  tutorPresident      TutorPresident?
  requestAddTutor     RequestAddTutor[]
  report              Report[]
  bugReport           BugReport[]
  requestAddFacility  RequestAddFacility[]
}

model Photo {
  id           Int          @id @default(autoincrement())
  userId       Int
  caption      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sportsEvent  String?
  publicLevel  String?
  feedCategory String?
  comments     Comment[]
  likes        Like[]
  user         User         @relation(fields: [userId], references: [id])
  feedUpload   FeedUpload[] @relation("FeedUploadToPhoto")
  hashtags     Hashtag[]    @relation("HashtagToPhoto")
  Report       Report[]
}

model FeedCategoryList {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sortKey   Int      @unique
}

model FeedUpload {
  id        Int      @id @default(autoincrement())
  imagePath String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo[]  @relation("FeedUploadToPhoto")
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photos    Photo[]  @relation("HashtagToPhoto")
}

model Like {
  id        Int      @id @default(autoincrement())
  photoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo    @relation(fields: [photoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([photoId, userId])
}

model Comment {
  id        Int         @id @default(autoincrement())
  payload   String
  userId    Int
  photoId   Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  photo     Photo       @relation(fields: [photoId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  reComment ReComment[]
}

model ReComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  payload   String
  delYn     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Group {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  discription      String?
  activeArea       String?
  address          String?
  addrRoad         String?
  areaLatitude     String?
  areaLongitude    String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sportsEvent      String
  buildingNumber   String?
  dongEubMyunName  String?
  gusiName         String?
  riName           String?
  roadName         String?
  sidoName         String?
  zipcode          String?
  groupPresidentId Int
  maxMember        String
  groupImageId     Int?
  board            Board[]
  gallery          Gallery[]
  groupImage       GroupImage?        @relation(fields: [groupImageId], references: [id])
  groupPresident   GroupPresident     @relation(fields: [groupPresidentId], references: [id])
  groupJoinRequest GroupJoinRequest[]
  notice           Notice[]
  facility         Facility[]         @relation("FacilityToGroup")
  groupInfo        GroupInfo[]        @relation("GroupToGroupInfo")
  groupTag         GroupTag[]         @relation("GroupToGroupTag")
  tutor            Tutor[]            @relation("GroupToTutor")
  users            User[]             @relation("GroupToUser")
}

model GroupImage {
  id        Int      @id @default(autoincrement())
  imagePath String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group[]
}

model GroupPresident {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group[]
  user      User     @relation(fields: [userId], references: [id])
}

model GroupInfo {
  id          Int      @id @default(autoincrement())
  discription String
  awardDate   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group[]  @relation("GroupToGroupInfo")

  @@unique([discription, awardDate])
}

model GroupTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imagePath String?
  group     Group[]  @relation("GroupToGroupTag")
}

model GroupJoinRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Tutor {
  id                  Int                   @id @default(autoincrement())
  name                String
  activeArea          String?
  address             String?
  addrRoad            String?
  detailAddress       String?
  areaLatitude        String?
  areaLongitude       String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  buildingNumber      String?
  dongEubMyunName     String?
  gusiName            String?
  riName              String?
  roadName            String?
  sidoName            String?
  zipcode             String?
  tutorImageId        Int?
  discription         String?
  access              Boolean               @default(false)
  maxMember           Int                   @default(0)
  board               Board[]
  gallery             Gallery[]
  notice              Notice[]
  tutorImage          TutorImage?           @relation(fields: [tutorImageId], references: [id])
  tutorInquiry        TutorInquiry[]
  TutorInquiryComment TutorInquiryComment[]
  tutorSportsEvent    TutorSportsEvent[]
  facility            Facility[]            @relation("FacilityToTutor")
  group               Group[]               @relation("GroupToTutor")
  tutorInfo           TutorInfo[]           @relation("TutorToTutorInfo")
  tutorTag            TutorTag[]            @relation("TutorToTutorTag")
  user                User[]                @relation("TutorToUser")
  tutorPresident      TutorPresident?       @relation(fields: [tutorPresidentId], references: [id])
  tutorPresidentId    Int?
}

model TutorPresident {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tutor     Tutor[]
  user      User     @relation(fields: [userId], references: [id])
}

model TutorSportsEvent {
  id        Int      @id @default(autoincrement())
  name      String
  tutorId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tutor     Tutor    @relation(fields: [tutorId], references: [id])
}

model TutorInquiry {
  id                  Int                   @id @default(autoincrement())
  tutorId             Int
  userId              Int?
  inquiryTitle        String
  inquiryDiscription  String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  inquiryResponse     Boolean?              @default(false)
  tutor               Tutor                 @relation(fields: [tutorId], references: [id])
  user                User?                 @relation(fields: [userId], references: [id])
  tutorInquiryComment TutorInquiryComment[]
}

model TutorInquiryComment {
  id                  Int          @id @default(autoincrement())
  userId              Int
  tutorId             Int
  answerOk            Boolean?     @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  responseDiscription String
  responseTitle       String
  tutorInquiryId      Int
  tutor               Tutor        @relation(fields: [tutorId], references: [id])
  tutorInquiry        TutorInquiry @relation(fields: [tutorInquiryId], references: [id])
  user                User         @relation(fields: [userId], references: [id])
}

model TutorImage {
  id        Int      @id @default(autoincrement())
  imagePath String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tutor     Tutor[]
}

model TutorInfo {
  id          Int      @id @default(autoincrement())
  discription String
  awardDate   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tutor       Tutor[]  @relation("TutorToTutorInfo")

  @@unique([discription, awardDate])
}

model TutorTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  imagePath String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tutor     Tutor[]  @relation("TutorToTutorTag")
}

model RequestAddTutor {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  discription String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Facility {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  activeArea      String
  address         String
  addrRoad        String
  detailAddress   String?
  areaLatitude    Float?
  areaLongitude   Float?
  operTime        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  discription     String
  buildingNumber  String
  dongEubMyunName String
  gusiName        String
  riName          String
  roadName        String
  sidoName        String
  zipcode         String
  facilityImage   FacilityImage[]
  facilityInfo    FacilityInfo[]   @relation("FacilityToFacilityInfo")
  facilitySports  FacilitySports[] @relation("FacilityToFacilitySports")
  facilityTag     FacilityTag[]    @relation("FacilityToFacilityTag")
  group           Group[]          @relation("FacilityToGroup")
  tutor           Tutor[]          @relation("FacilityToTutor")
}

model FacilityImage {
  id        Int        @id @default(autoincrement())
  imagePath String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  facility  Facility[]
}

model FacilityInfo {
  id          Int        @id @default(autoincrement())
  discription String
  awardDate   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  facility    Facility[] @relation("FacilityToFacilityInfo")

  @@unique([discription, awardDate])
}

model FacilityTag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  imagePath String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  facility  Facility[] @relation("FacilityToFacilityTag")
}

model FacilitySports {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  facility  Facility[] @relation("FacilityToFacilitySports")
}

model RequestAddFacility {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  discription String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Board {
  id           Int            @id @default(autoincrement())
  userId       Int
  groupId      Int?
  tutorId      Int?
  title        String
  discription  String
  sortation    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  hits         Int            @default(0)
  group        Group?         @relation(fields: [groupId], references: [id])
  tutor        Tutor?         @relation(fields: [tutorId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  boardComment BoardComment[]
  boardLike    BoardLike[]
  Report       Report[]
}

model BoardComment {
  id             Int              @id @default(autoincrement())
  userId         Int
  boardId        Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  payload        String
  delYn          Boolean          @default(false)
  board          Board            @relation(fields: [boardId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  boardReComment BoardReComment[]
}

model BoardReComment {
  id             Int          @id @default(autoincrement())
  userId         Int
  boardCommentId Int
  payload        String
  delYn          Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  boardComment   BoardComment @relation(fields: [boardCommentId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model BoardLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  boardId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([boardId, userId])
}

model Notice {
  id            Int             @id @default(autoincrement())
  userId        Int
  groupId       Int?
  tutorId       Int?
  title         String
  discription   String
  sortation     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  hits          Int             @default(0)
  group         Group?          @relation(fields: [groupId], references: [id])
  tutor         Tutor?          @relation(fields: [tutorId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  noticeComment NoticeComment[]
  noticeLike    NoticeLike[]
  Report        Report[]
}

model NoticeComment {
  id              Int               @id @default(autoincrement())
  userId          Int
  noticeId        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  payload         String
  notice          Notice            @relation(fields: [noticeId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  NoticeReComment NoticeReComment[]
}

model NoticeReComment {
  id              Int           @id @default(autoincrement())
  userId          Int
  noticeCommentId Int
  payload         String
  delYn           Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  noticeComment   NoticeComment @relation(fields: [noticeCommentId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model NoticeLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  noticeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notice    Notice   @relation(fields: [noticeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([noticeId, userId])
}

model Gallery {
  id           Int            @id @default(autoincrement())
  userId       Int
  groupId      Int?
  tutorId      Int?
  title        String
  discription  String
  sortation    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  group        Group?         @relation(fields: [groupId], references: [id])
  tutor        Tutor?         @relation(fields: [tutorId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  galleryImage GalleryImage[]
}

model GalleryImage {
  id        Int      @id @default(autoincrement())
  imagePath String   @unique
  galleryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
}

model SportsEvent {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imagePath String?
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  imagePath String?
  sortation String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  users     User[]    @relation("RoomToUser")
}

model Message {
  id        Int      @id @default(autoincrement())
  payload   String
  userId    Int
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Banner {
  id                  Int                   @id @default(autoincrement())
  title               String
  discription         String?
  sidoName            String?
  gusiName            String?
  dongEubMyunName     String?
  riName              String?
  roadName            String?
  buildingNumber      String?
  zipcode             String?
  activeArea          String?
  address             String?
  addrRoad            String?
  detailAddress       String?
  areaLatitude        String?
  areaLongitude       String?
  sportsEvent         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  bannerImagePath     String
  sortation           String?
  bannerDiscImagePath BannerDiscImagePath[]
  externalLink        String?
}

model BannerDiscImagePath {
  id        Int      @id @default(autoincrement())
  bannerId  Int?
  imagePath String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Banner    Banner?  @relation(fields: [bannerId], references: [id])
}

model Report {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  photoId           Int?
  photo             Photo?   @relation(fields: [photoId], references: [id])
  boardId           Int?
  board             Board?   @relation(fields: [boardId], references: [id])
  noticeId          Int?
  notice            Notice?  @relation(fields: [noticeId], references: [id])
  reportDiscription String
  reportSortation   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BugReport {
  id                Int              @id @default(autoincrement())
  userId            Int
  user              User             @relation(fields: [userId], references: [id])
  reportTitle       String
  reportDiscription String
  bugReportImage    BugReportImage[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model BugReportImage {
  id          Int        @id @default(autoincrement())
  bugReport   BugReport? @relation(fields: [bugReportId], references: [id])
  bugReportId Int?
  imagePath   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
